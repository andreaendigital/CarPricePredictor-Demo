name: üöó Car Price Prediction CI/CD

on:
  push:
    branches: [ main, develop, 'feature/*', 'SCRUM-*' ]
  pull_request:
    branches: [ main, develop ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  PYTHON_VERSION: '3.11'

permissions:
  contents: read
  packages: write
  security-events: write

jobs:
  test:
    name: üß™ Test & Quality
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.9', '3.11']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        cache-dependency-path: pyproject.toml

    - name: Setup environment
      run: make setup

    - name: Run tests
      run: make test



  build:
    name: üê≥ Build Images
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    outputs:
      backend-image: ${{ steps.meta-backend.outputs.tags }}
      frontend-image: ${{ steps.meta-frontend.outputs.tags }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata (Backend)
      id: meta-backend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/carpriceprediction-backend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Extract metadata (Frontend)
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/carpriceprediction-frontend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Backend
      uses: docker/build-push-action@v6
      with:
        context: .
        file: ./backend/Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        provenance: true
        sbom: true

    - name: Build and push Frontend
      uses: docker/build-push-action@v6
      with:
        context: .
        file: ./frontend/Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        provenance: true
        sbom: true

  deploy-dev:
    name: üöÄ Deploy to Development
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/heads/SCRUM-')
    environment:
      name: development
      url: https://dev.carprice.example.com
    concurrency:
      group: deploy-dev
      cancel-in-progress: true

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to Development Environment
      run: |
        echo "üöÄ Deploying to development environment..."
        echo "Backend Image: ${{ needs.build.outputs.backend-image }}"
        echo "Frontend Image: ${{ needs.build.outputs.frontend-image }}"
        # Add actual deployment commands here
        # kubectl apply -f k8s/dev/ || docker-compose up -d

    - name: Wait for deployment
      run: sleep 30

    - name: Health Check
      run: |
        echo "üè• Running health checks..."
        # Add actual health check commands
        # curl -f https://dev.carprice.example.com/health || exit 1
        echo "‚úÖ Development deployment successful"

    - name: Notify deployment
      if: always()
      run: |
        echo "Deployment status: ${{ job.status }}"
        # Add Slack/Teams notification here

  deploy-prod:
    name: üåü Deploy to Production
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://carprice.example.com
    concurrency:
      group: deploy-prod
      cancel-in-progress: false

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Production deployment approval
      run: |
        echo "‚ö†Ô∏è Production deployment requires manual approval"
        echo "Images to deploy:"
        echo "Backend: ${{ needs.build.outputs.backend-image }}"
        echo "Frontend: ${{ needs.build.outputs.frontend-image }}"

    - name: Deploy to Production Environment
      run: |
        echo "üåü Deploying to production environment..."
        # Add actual production deployment commands
        # kubectl apply -f k8s/prod/ || docker-compose -f docker-compose.prod.yml up -d

    - name: Wait for deployment
      run: sleep 60

    - name: Production Health Check
      run: |
        echo "üè• Running production health checks..."
        # Add comprehensive health checks
        # curl -f https://carprice.example.com/health || exit 1
        # curl -f https://carprice.example.com/api/health || exit 1
        echo "‚úÖ Production deployment successful"

    - name: Post-deployment tasks
      run: |
        echo "üìä Running post-deployment tasks..."
        # Add monitoring setup, cache warming, etc.
        echo "‚úÖ Post-deployment tasks completed"

    - name: Notify production deployment
      if: always()
      run: |
        echo "Production deployment status: ${{ job.status }}"
        # Add critical notifications here
